package main

import "testing"

func Test_maximizeSquareArea(t *testing.T) {
	type args struct {
		m       int
		n       int
		hFences []int
		vFences []int
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		// TODO: Add test cases.
		{
			name: "case1",
			args: args{
				//m = 4, n = 3, hFences = [2,3], vFences = [2]
				m:       4,
				n:       3,
				hFences: []int{2, 3},
				vFences: []int{2},
			},
			want: 4,
		},
		{
			name: "case2",
			args: args{
				//m = 4, n = 3, hFences = [2,3], vFences = [2]
				m:       6,
				n:       7,
				hFences: []int{2},
				vFences: []int{4},
			},
			want: -1,
		},
		//[3838,1043,81,1466,2610,3658,3545,475,1582,706,1768,105,3400,941,2423,1414,592,2895,3299,3575,2186,1916,1556,4136,1444,3886,3261,831,4558,3896,1360,506,203,2617,383,1802,4314,4286,750,1140,1154,1927,3469,950,3454,2804,1003,3537,1730,2889,927,2194,1785,3701,1544,3133,3321,824,2243,431,4159,1692,1142,2368,3366,2834,3462,1490,3783,579,3069,2208,302,4575,3393,264,912,4096,1156,3754,2380,3614,4260,3117,4119,1697,1036]
		//[7572,5817,1003,998,1906,5701,6073,5234,3491,3987,6732,7206,6127,5555,4394,2388,1085,2973,6567,4687,969,4409,1364,4998,891,7212,535,2496,3864,7506,2337,5105,7157,2389,7833,7741,2602,4048,4275,4984,3523,3740,7215,7514,4408,1198,6365,3143,6343,693,2755,2330,166,3428,6432,1871,6967,7275,329,4714,7473,350,3443,2598,4343,1230,1399,2000,5569,7415,6897,5258,2647,4032,785,5721,7422,5989,4870,7214,3001,3196,7177,6360,4205,5429,4454,6020,623,97,1012,1350,5986,3879,4918,909,1686,6046,6984,6079,5936,7551,5311,7248,153,4359,3263,4772,1147,2848,6370,4117,7065,7867,4530,4003,5751,3113,6498,3372,2494,3470,7496,2355,1618,2997,6401,2403,6795,6216,158,3949,684,6566,5537,1259,3111,4695,1480,4588,6314,8056,2321,3445,5421,5788,7003,944,5612,1843,2279,5975,2965,4486,2312,3841,3827,3612,4900,2757,3797,2243,6648,213,4924,3680,6582,3115,5384,5274,6783,1737,677,258,876,3481,4785,1262,1016,2222,6550,5370,3148,2977,4787,6004,8079,6036,2288,4844,4356,2295,3484,5088,7656,2756,1903,7762,1349,4750,6252,8075,1579,484,7451,5285,6034,7134,2311,6832,6585,3715,28,7107,764,7622,2249,4386,4746,2917,2574,6855,5962,2538,4742,4817,886,2814,7344,5628,5061,179,218,7654,3673,2878,7498,404,3355,2869,7357,6246,7301,7074,1341,4119,1303,126,6775,7768,5603,1977,86,431,5776,5716,4739,1809,3284,4235,1927,2240,985,3821,7105,3469,6506,4155,3076,1056,1846,5423,7475,697,4004,1867,2790,4317,27,6425,5744,3865,1670,7882,690,1611,5736,3574,5510,3751,1159,7009,7012,2549,6510,3485,3073,6291,3880,7319,1885,3531,5437,4880,6232,7778,2358,6111,5353,1235,2820,1363,7306,639,559,1743,7247,6786,6512,7541,995,1440,6876,3475,3653,761,661,3242,7099,1173,2199,6614,6061,5070,7951,6338,7391,2039,6703,353,5554,4430,7101,5121,4203,6429,3873,3645,4652,6342,1392,3380,7796,3825,1815,7204,3744,1684,2157,2287,6397,7784,1786,2092,4852,6576,4511,5211,762,3114,4005,3083,2765,5941,1600,6234,2679,4127,7909,7560,1826,4999,752,282,609,5175,4242,4667,1868,4857,20,6066,2772,4012,6053,950,1652,7899,580,4458,6908,3382,2405,7728,7974,3426,5251,1153,7912,519,6910,1538,525,4257,2763,1073,7039,1922,7263,6723,7485,1488]
		{
			name: "case3",
			args: args{
				//m = 4, n = 3, hFences = [2,3], vFences = [2]
				m:       4856,
				n:       8084,
				hFences: []int{3838, 1043, 81, 1466, 2610, 3658, 3545, 475, 1582, 706, 1768, 105, 3400, 941, 2423, 1414, 592, 2895, 3299, 3575, 2186, 1916, 1556, 4136, 1444, 3886, 3261, 831, 4558, 3896, 1360, 506, 203, 2617, 383, 1802, 4314, 4286, 750, 1140, 1154, 1927, 3469, 950, 3454, 2804, 1003, 3537, 1730, 2889, 927, 2194, 1785, 3701, 1544, 3133, 3321, 824, 2243, 431, 4159, 1692, 1142, 2368, 3366, 2834, 3462, 1490, 3783, 579, 3069, 2208, 302, 4575, 3393, 264, 912, 4096, 1156, 3754, 2380, 3614, 4260, 3117, 4119, 1697, 1036},
				vFences: []int{7572, 5817, 1003, 998, 1906, 5701, 6073, 5234, 3491, 3987, 6732, 7206, 6127, 5555, 4394, 2388, 1085, 2973, 6567, 4687, 969, 4409, 1364, 4998, 891, 7212, 535, 2496, 3864, 7506, 2337, 5105, 7157, 2389, 7833, 7741, 2602, 4048, 4275, 4984, 3523, 3740, 7215, 7514, 4408, 1198, 6365, 3143, 6343, 693, 2755, 2330, 166, 3428, 6432, 1871, 6967, 7275, 329, 4714, 7473, 350, 3443, 2598, 4343, 1230, 1399, 2000, 5569, 7415, 6897, 5258, 2647, 4032, 785, 5721, 7422, 5989, 4870, 7214, 3001, 3196, 7177, 6360, 4205, 5429, 4454, 6020, 623, 97, 1012, 1350, 5986, 3879, 4918, 909, 1686, 6046, 6984, 6079, 5936, 7551, 5311, 7248, 153, 4359, 3263, 4772, 1147, 2848, 6370, 4117, 7065, 7867, 4530, 4003, 5751, 3113, 6498, 3372, 2494, 3470, 7496, 2355, 1618, 2997, 6401, 2403, 6795, 6216, 158, 3949, 684, 6566, 5537, 1259, 3111, 4695, 1480, 4588, 6314, 8056, 2321, 3445, 5421, 5788, 7003, 944, 5612, 1843, 2279, 5975, 2965, 4486, 2312, 3841, 3827, 3612, 4900, 2757, 3797, 2243, 6648, 213, 4924, 3680, 6582, 3115, 5384, 5274, 6783, 1737, 677, 258, 876, 3481, 4785, 1262, 1016, 2222, 6550, 5370, 3148, 2977, 4787, 6004, 8079, 6036, 2288, 4844, 4356, 2295, 3484, 5088, 7656, 2756, 1903, 7762, 1349, 4750, 6252, 8075, 1579, 484, 7451, 5285, 6034, 7134, 2311, 6832, 6585, 3715, 28, 7107, 764, 7622, 2249, 4386, 4746, 2917, 2574, 6855, 5962, 2538, 4742, 4817, 886, 2814, 7344, 5628, 5061, 179, 218, 7654, 3673, 2878, 7498, 404, 3355, 2869, 7357, 6246, 7301, 7074, 1341, 4119, 1303, 126, 6775, 7768, 5603, 1977, 86, 431, 5776, 5716, 4739, 1809, 3284, 4235, 1927, 2240, 985, 3821, 7105, 3469, 6506, 4155, 3076, 1056, 1846, 5423, 7475, 697, 4004, 1867, 2790, 4317, 27, 6425, 5744, 3865, 1670, 7882, 690, 1611, 5736, 3574, 5510, 3751, 1159, 7009, 7012, 2549, 6510, 3485, 3073, 6291, 3880, 7319, 1885, 3531, 5437, 4880, 6232, 7778, 2358, 6111, 5353, 1235, 2820, 1363, 7306, 639, 559, 1743, 7247, 6786, 6512, 7541, 995, 1440, 6876, 3475, 3653, 761, 661, 3242, 7099, 1173, 2199, 6614, 6061, 5070, 7951, 6338, 7391, 2039, 6703, 353, 5554, 4430, 7101, 5121, 4203, 6429, 3873, 3645, 4652, 6342, 1392, 3380, 7796, 3825, 1815, 7204, 3744, 1684, 2157, 2287, 6397, 7784, 1786, 2092, 4852, 6576, 4511, 5211, 762, 3114, 4005, 3083, 2765, 5941, 1600, 6234, 2679, 4127, 7909, 7560, 1826, 4999, 752, 282, 609, 5175, 4242, 4667, 1868, 4857, 20, 6066, 2772, 4012, 6053, 950, 1652, 7899, 580, 4458, 6908, 3382, 2405, 7728, 7974, 3426, 5251, 1153, 7912, 519, 6910, 1538, 525, 4257, 2763, 1073, 7039, 1922, 7263, 6723, 7485, 1488},
			},
			want: 23571025,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := maximizeSquareArea(tt.args.m, tt.args.n, tt.args.hFences, tt.args.vFences); got != tt.want {
				t.Errorf("maximizeSquareArea() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_minimumCost(t *testing.T) {
	type args struct {
		source   string
		target   string
		original []string
		changed  []string
		cost     []int
	}
	tests := []struct {
		name string
		args args
		want int64
	}{
		// TODO: Add test cases.,
		{
			name: "case2",
			args: args{
				//m = 4, n = 3, hFences = [2,3], vFences = [2]
				source:   "abcd",
				target:   "acbe",
				original: []string{"a", "b", "c", "c", "e", "d"},
				changed:  []string{"b", "c", "b", "e", "b", "e"},
				cost:     []int{2, 5, 5, 1, 2, 20},
			},
			want: 28,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := minimumCost(tt.args.source, tt.args.target, tt.args.original, tt.args.changed, tt.args.cost); got != tt.want {
				t.Errorf("minimumCost() = %v, want %v", got, tt.want)
			}
		})
	}
}
